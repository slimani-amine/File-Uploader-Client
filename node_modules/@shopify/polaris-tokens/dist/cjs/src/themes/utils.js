'use strict';

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var deepmerge = require('deepmerge');
var utilities = require('../utilities.js');
var index = require('./base/index.js');

var createMetaThemePartial = utilities.createExact();
function createMetaTheme(metaThemePartial) {
  return deepmerge(index.metaThemeBase, metaThemePartial);
}
function flattenMetaTheme(metaTheme) {
  return Object.fromEntries(Object.values(metaTheme).flatMap(function (metaTokenGroup) {
    return Object.entries(metaTokenGroup).map(function (_ref5) {
      var _ref6 = _rollupPluginBabelHelpers.slicedToArray(_ref5, 2),
        tokenName = _ref6[0],
        metaTokenProperties = _ref6[1];
      return [tokenName, metaTokenProperties];
    });
  }));
}
function resolveMetaThemeRefs(metaTheme) {
  var flattenedMetaTheme = flattenMetaTheme(metaTheme);
  return Object.fromEntries(Object.entries(metaTheme).map(function (_ref7) {
    var _ref8 = _rollupPluginBabelHelpers.slicedToArray(_ref7, 2),
      tokenGroupName = _ref8[0],
      metaTokenGroup = _ref8[1];
    return [tokenGroupName, Object.fromEntries(Object.entries(metaTokenGroup).map(function (_ref9) {
      var _ref10 = _rollupPluginBabelHelpers.slicedToArray(_ref9, 2),
        tokenName = _ref10[0],
        metaTokenProperties = _ref10[1];
      var tokenValue = metaTokenProperties.value;
      while (tokenValue.startsWith('var(--p-')) {
        var tokenNameRef = tokenValue.slice(8, -1);
        tokenValue = flattenedMetaTheme[tokenNameRef].value;
      }
      return [tokenName, Object.assign(Object.assign({}, metaTokenProperties), {}, {
        value: tokenValue
      })];
    }))];
  }));
}

exports.createMetaTheme = createMetaTheme;
exports.createMetaThemePartial = createMetaThemePartial;
exports.flattenMetaTheme = flattenMetaTheme;
exports.resolveMetaThemeRefs = resolveMetaThemeRefs;
